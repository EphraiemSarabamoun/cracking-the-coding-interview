Java Generics: Introduced in Java 5, they provide type safety at compile time but use type erasure—generic info is removed at runtime (e.g., List<String> becomes List). This ensures backward compatibility but limits runtime type checks. Generics support bounds (e.g., <? extends Number>) and are mainly for collections.
C++ Templates: Compile-time mechanism where the compiler generates separate code for each type (code bloat possible). No type erasure—full type info at runtime. More powerful (can use non-type parameters like ints) but can lead to longer compile times and errors only at instantiation.